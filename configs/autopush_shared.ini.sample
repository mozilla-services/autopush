; Settings shared by the connection and endpoint nodes.

; Uncomment to enable verbose logging for WebSocket connections and HTTP
; requests. This should be disabled in production.
#debug

; TLS private key and certificate file paths, used for the main
; connection and endpoint listeners. If omitted, TLS will not be
; used.
#ssl_key =
#ssl_cert =
; Path to file containing any additional parameters for the Ephemeral
; Diffie-Hellman
#ssl_dh_param =

; The push endpoint token encryption keys. Must be 32-byte, URL-safe
; Base64 encoded strings. Keys can be generated by running
; `pypy/bin/autokey`. This key should be identical for connection and
; endpoint nodes in the same cluster; otherwise, endpoints won't be
; able to decrypt tokens generated by the connection node.
; Keys should be sorted [newest,oldest]
crypto_key = []

; The key_hash is the key used to hash the UAID for storage.
; Note, changing this key WILL result in previously stored UAIDs becoming
; unreadable. Note: Multiple reads against DynamoDB is really not recommended
; unless you've recently hit the powerball and don't mind signing over your
; winnings to AWS.
#key_hash =

; Hostname is the name to announce the server. This is useful if the local
; machine name is not the "official" service name.
; (e.g. push.services.mozilla.org)
#hostname =
;
; Uncomment to resolve the local IP address into a hostname if possible.
#resolve_hostname

; Datadog credentials. If a Datadog API key is specified, the statsd
; options will be ignored. Datadog is not required to run this server.
#datadog_api_key =
#datadog_app_key =
;
; The number of seconds to wait between flushes.
#datadog_flush_interval = 10

; statsd server options.
statsd_host = localhost
statsd_port = 8125

; The running environment autopush is in (e.g. "development", "staging",
; "production", etc.)
#env = development

; Settings for the DynamoDB storage table, used to store notification
; versions for disconnected clients. If the table does not exist on
; startup, it will be created and provisioned with the given
; throughputs.
storage_tablename = storage
storage_read_throughput = 5
storage_write_throughput = 5

; Settings for the DynamoDB routing table, used to track where each
; client is currently connected.
router_tablename = router
router_read_throughput = 5
router_write_throughput = 5

; Settings for the DynamoDB message table, used to store encyrpted
; messages for offline users.
#message_tablename = message
#message_read_throughput = 5
#message_write_throughput = 5

; The endpoint scheme, hostname and port, used to construct the push
; endpoint URL for each registered channel. Defaults to the system
; hostname. This should match the hostname and port from
; `autoendpoint_settings.py`.
endpoint_scheme = http
#endpoint_hostname = updates.push.services.mozilla.com
endpoint_port = 8082

; Uncomment to provide stdout logging in a more human readable format.
#human_logs

## External Router Arguments
; autopush allows for bridges using external router systems such as Google
; Cloud Messaging (gcm), Apple Push Notification System (apns), or
; proprietary UDP systems. These optional arguments allow you to configure
; those bridges.
;
; Uncomment to enable the Google Cloud Messaging bridge support.
#gcm_enabled

; Default hash of senderids and associated authorization keys.
; The list is specified as a JSON object formatted as:
; {<senderid> :{"auth": <auth_value>}}
; e.g.
; {"12345": {"auth": "abcd_efg"}, "01357": {"auth": "ZYX=abc"}}
#senderid_list =

; FCM is the later version of GCM
#fcm_enabled
; The FCM router only allows one senderid/auth key due to restrictions on
; the client
#fcm_collapsekey = simplepush
#fcm_senderid =
#fcm_auth =
#fcm_dryrun

; Perform AWS specific information (like fetch the AMI ID from the meta-data
; server
;
; Uncomment to disable AWS meta checks.
#no_aws

; Apple Push Notification System uses a set of certificates tied to the
; application. Since we support multiple iOS "applications" we need to support
; multiple certificates.
; apns_cert is a JSON formatted dict specifying the paths to the cert files,
; as well as any other bits of information that may be necessary. The format
; is {"platform":
;       {"cert": "path_to_cert_file",
;        "key": "path_to_key_file",
;        "default_title": "(optional) default alert title 'Mozilla Push'",
;        "topic": "com.mozilla.org.Firefox",  // Bundle ID for associated app
;        "max_connections": 100, // Max number of connection pool entries.
;        "sandbox": False},  // Use the APNs sandbox feature
;     ... }
; e.g {"firefox":{"cert":"certs/main.cert","key":"certs/main.key","topic":"com.mozilla.org.Firefox"},"beta":{"cert":"certs/beta.cert","key":"certs/beta.key","topic":"com.mozilla.org.FirefoxBeta"}}
#apns_creds =

